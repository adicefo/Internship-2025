openapi: 3.0.1
info:
  title: Internship_API
  description: This is the Internship API documentation. My goal is to learn best practices about REST API Design and Architecture.
  version: 1.0.0

servers:
  - url: http://localhost:8081/v2
paths:
  # Users path
  /users/get:
    get:
      tags:
        - Users
      summary: Get Users
      operationId: getUsers
      security:
        - internship_api_security_scheme:
            - read_access
      parameters:
        - name: search
          in: query
          description: Search parameters for filtering users
          required: false
          schema:
            $ref: '#/components/schemas/UserSearchObject'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/UserDTO"
  /users/register:
    post:
      tags:
        - Users
      summary: Register a new user
      operationId: createUser
      security:
        - internship_api_security_scheme:
            - write_access
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInsertRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  statusCode:
                    type: integer
  /users/getById/{id}:
    get:
      tags:
        - Users
      summary: Get a user by ID
      operationId: getUserById
      security:
        - internship_api_security_scheme:
            - read_access
      parameters:
        - name: id
          in: path
          description: ID of the user to fetch
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully retrieved user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '404':
          description: The User with the specified ID does not exist
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  statusCode:
                    type: integer
  /users/update/{id}:
    put:
      tags:
        - Users
      summary: Update user details by ID
      operationId: updateUser
      security:
        - internship_api_security_scheme:
            - write_access
      parameters:
        - name: id
          in: path
          description: The ID of the user to update
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  statusCode:
                    type: integer
  /users/delete/{id}:
    delete:
      tags:
        - Users
      summary: Delete user by ID
      operationId: deleteUser
      security:
        - internship_api_security_scheme:
            - write_access
      parameters:
        - name: id
          in: path
          description: The ID of the user to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  statusCode:
                    type: integer
  # Admin path
  /admin/get:
    get:
      tags:
        - Admin
      summary: Get Admin
      operationId: getAdmin
      security:
        - internship_api_security_scheme:
            - read_access
      parameters:
        - name: search
          in: query
          description: Search parameters for filtering admin
          required: false
          schema:
            $ref: '#/components/schemas/AdminSearchObject'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/AdminDTO"

  /admin/save:
    post:
      tags:
        - Admin
      summary: Save Admin
      operationId: createAdmin
      security:
        - internship_api_security_scheme:
            - write_access
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInsertRequest'
      responses:
        '201':
          description: Admin registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminDTO'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  statusCode:
                    type: integer
  /admin/save/{userId}:
    post:
      tags:
        - Admin
      summary: Save Admin Based on Current User
      operationId: createAdminBasedOnUser
      security:
        - internship_api_security_scheme:
            - write_access
      parameters:
        - name: userId
          in: path
          description: ID of the user to save as admin
          required: true
          schema:
            type: integer
      responses:
        '201':
          description: Admin registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminDTO'
        '404':
          description: The User with the specified ID does not exist
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  statusCode:
                    type: integer
  /admin/getById/{id}:
    get:
      tags:
        - Admin
      summary: Get admin by ID
      operationId: getAdminById
      security:
        - internship_api_security_scheme:
            - read_access
      parameters:
        - name: id
          in: path
          description: ID of the admin to fetch
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully retrieved admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminDTO'
        '404':
          description: The Admin with the specified ID does not exist
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  statusCode:
                    type: integer
  /admin/update/{id}:
    put:
      tags:
        - Admin
      summary: Update admin details by ID
      operationId: updateAdmin
      security:
        - internship_api_security_scheme:
            - write_access
      parameters:
        - name: id
          in: path
          description: The ID of the user to update
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
      responses:
        '200':
          description: Admin updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminDTO'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  statusCode:
                    type: integer
  /admin/delete/{id}:
    delete:
      tags:
        - Admin
      summary: Delete admin by ID
      operationId: deleteAdmin
      security:
        - internship_api_security_scheme:
            - write_access
      parameters:
        - name: id
          in: path
          description: The ID of the admin to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Admin deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminDTO'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  statusCode:
                    type: integer
  #Client path
  /client/get:
    get:
      tags:
        - Client
      summary: Get Client
      operationId: getClient
      security:
        - internship_api_security_scheme:
            - read_access
      parameters:
        - name: search
          in: query
          description: Search parameters for filtering client
          required: false
          schema:
            $ref: '#/components/schemas/ClientSearchObject'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/ClientDTO"

  /client/save:
    post:
      tags:
        - Client
      summary: Save Client
      operationId: createClient
      security:
        - internship_api_security_scheme:
            - write_access
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInsertRequest'
      responses:
        '201':
          description: Client registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientDTO'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  statusCode:
                    type: integer
  /client/save/{userId}:
    post:
      tags:
        - Client
      summary: Save Client Based on Current User
      operationId: createClientBasedOnUser
      security:
        - internship_api_security_scheme:
            - write_access
      parameters:
        - name: userId
          in: path
          description: ID of the user to save as client
          required: true
          schema:
            type: integer
      responses:
        '201':
          description: Client registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientDTO'
        '404':
          description: The User with the specified ID does not exist
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  statusCode:
                    type: integer
  /client/getById/{id}:
    get:
      tags:
        - Client
      summary: Get client by ID
      operationId: getClientById
      security:
        - internship_api_security_scheme:
            - read_access
      parameters:
        - name: id
          in: path
          description: ID of the client to fetch
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully retrieved client
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientDTO'
        '404':
          description: The Client with the specified ID does not exist
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  statusCode:
                    type: integer
  /client/delete/{id}:
    delete:
      tags:
        - Client
      summary: Delete client by ID
      operationId: deleteClient
      security:
        - internship_api_security_scheme:
            - write_access
      parameters:
        - name: id
          in: path
          description: The ID of the client to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Client deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientDTO'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  statusCode:
                    type: integer
  #Driver path
  /driver/get:
    get:
      tags:
        - Driver
      summary: Get Driver
      operationId: getDriver
      security:
        - internship_api_security_scheme:
            - read_access
      parameters:
        - name: search
          in: query
          description: Search parameters for filtering driver
          required: false
          schema:
            $ref: '#/components/schemas/DriverSearchObject'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/DriverDTO"

  /driver/save:
    post:
      tags:
        - Driver
      summary: Save Driver
      operationId: createDriver
      security:
        - internship_api_security_scheme:
            - write_access
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInsertRequest'
      responses:
        '201':
          description: Driver registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DriverDTO'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  statusCode:
                    type: integer
  /driver/save/{userId}:
    post:
      tags:
        - Driver
      summary: Save Driver Based on Current User
      operationId: createDriverBasedOnUser
      security:
        - internship_api_security_scheme:
            - write_access
      parameters:
        - name: userId
          in: path
          description: ID of the user to save as driver
          required: true
          schema:
            type: integer
      responses:
        '201':
          description: Driver registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DriverDTO'
        '404':
          description: The User with the specified ID does not exist
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  statusCode:
                    type: integer
  /driver/getById/{id}:
    get:
      tags:
        - Driver
      summary: Get driver by ID
      operationId: getDriverById
      security:
        - internship_api_security_scheme:
            - read_access
      parameters:
        - name: id
          in: path
          description: ID of the driver to fetch
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully retrieved driver
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DriverDTO'
        '404':
          description: The Driver with the specified ID does not exist
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  statusCode:
                    type: integer
  /driver/delete/{id}:
    delete:
      tags:
        - Driver
      summary: Delete driver by ID
      operationId: deleteDriver
      security:
        - internship_api_security_scheme:
            - write_access
      parameters:
        - name: id
          in: path
          description: The ID of the driver to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Driver deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DriverDTO'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  statusCode:
                    type: integer

components:
  securitySchemes:
    internship_api_security_scheme:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://keycloak:8080/realms/Internship_API/protocol/openid-connect/auth
          tokenUrl: http://keycloak:8080/realms/Internship_API/protocol/openid-connect/token
          scopes:
            read_access: read data
            write_access: modify data
  schemas:
    List:
      type: object
      properties:
        count:
          type: integer
    #User data objecets
    UserDTO:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        surname:
          type: string
        username:
          type: string
        email:
          type: string
        telephoneNumber:
          type: string
        gender:
          type: string
        registrationDate:
          type: string
          format: date-time
    UserSearchObject:
      type: object
      properties:
        pageNumber:
          type: integer
          description: The page number for pagination
        pageSize:
          type: integer
          description: The page size for pagination
        username:
          type: string
          description: The username to filter by
        email:
          type: string
          description: The email to filter by
        name:
          type: string
          description: The name to filter by
        surname:
          type: string
          description: The surname to filter by
    UserInsertRequest:
      type: object
      properties:
        name:
          type: string
          description: The name of the user
          pattern: '^[A-Z][A-Za-z0-9]{1,}$'
          example: 'Mustafa'
        surname:
          type: string
          description: The surname of the user
          pattern: '^[A-Z][A-Za-z0-9]{1,}$'
          example: 'Kovac'
        username:
            type: string
            description: The username of the user
            minLength: 5
            maxLength: 20
        email:
          type: string
          description: The email of the user
          pattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
          example: 'name.surname@edu.fit.ba'
        password:
          type: string
          description: The password of the user
        passwordConfirm:
          type: string
          description: The password confirmation of the user
        telephoneNumber:
          type: string
          description: The telephone number of the user
          pattern: '^06\d-\d{3}-\d{3,4}$'
          example: '06X-XXX-XXXX'
        gender:
          type: string
          enum: [male,Male,female,Female]
          description: The user's gender
        isActive:
          type: boolean
          description: The user's active status
      required:
        - name
        - surname

    UserUpdateRequest:
      type: object
      properties:
        name:
          type: string
          description: The name of the user
          minLength: 2
          pattern: '^[A-Z][A-Za-z0-9]{1,}$'
          example: 'Joshua'
        surname:
          type: string
          description: The surname of the user
          minLength: 2
          pattern: '^[A-Z][A-Za-z0-9]{1,}$'
        telephoneNumber:
          type: string
          description: The telephone number of the user
          pattern: '^06\d-\d{3}-\d{3,4}$'
          example: 'Philips'
        email:
          type: string
          description: The email of the user
          pattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
          example: 'name.surname(name)@edu.fit.ba'
        username:
          type: string
          description: The username of the user
          minLength: 5
        password:
          type: string
          description: The new password of the user
        passwordConfirm:
          type: string
          description: The new password confirmation of the user
      required:
        - name
        - surname
    #Admin data objects
    AdminDTO:
      type: object
      properties:
        id:
          type: integer
        user:
          $ref: '#/components/schemas/UserDTO'
    AdminSearchObject:
        type: object
        properties:
          pageNumber:
            type: integer
            description: The page number for pagination
          pageSize:
            type: integer
            description: The page size for pagination
          name:
            type: string
            description: The name to filter by
          surname:
            type: string
            description: The surname to filter by
    #Client data objects
    ClientDTO:
      type: object
      properties:
        id:
          type: integer
        image:
          type: string
          format: byte
        user:
          $ref: '#/components/schemas/UserDTO'
    ClientSearchObject:
      type: object
      properties:
        pageNumber:
          type: integer
          description: The page number for pagination
        pageSize:
          type: integer
          description: The page size for pagination
        name:
          type: string
          description: The name to filter by
        surname:
          type: string
          description: The surname to filter by
    #Driver data objects
    DriverDTO:
      type: object
      properties:
        id:
          type: integer
        numberOfClientsAmount:
          type: integer
        numberOfHoursAmount:
          type: integer
        user:
          $ref: '#/components/schemas/UserDTO'
    DriverSearchObject:
      type: object
      properties:
        pageNumber:
          type: integer
          description: The page number for pagination
        pageSize:
          type: integer
          description: The page size for pagination
        name:
          type: string
          description: The name to filter by
        surname:
          type: string
          description: The surname to filter by